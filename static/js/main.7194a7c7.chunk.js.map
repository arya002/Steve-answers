{"version":3,"sources":["App.js","serviceWorker.js","index.js","MainStyling.module.css"],"names":["styles","headerText","textShadow","fontFamily","fontWeight","fontSize","color","App","useState","ques","setQues","flag","setFlag","answer","setAnswer","submit","setSubmit","pledge","className","classes","main","header","style","container","Form","onSubmit","event","preventDefault","Group","controlId","Label","Control","autoComplete","placeholder","onChange","e","last_char","target","value","slice","length","display","justifyContent","Button","variant","type","onClick","window","location","reload","width","marginTop","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.7194a7c7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { \n  Button,\n  Form,\n} from 'react-bootstrap';\n\nimport './App.css';\nimport classes from './MainStyling.module.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [ques, setQues] = useState('');\n  const [flag, setFlag] = useState(false);\n  const [answer, setAnswer] = useState('');\n  const [submit, setSubmit] = useState(false);\n  const pledge = 'Peter please answer my question.';\n\n  function handleChange(e) {\n    const last_char = e.target.value.slice(-1)[0];\n    const length = e.target.value.length;\n    let display = e.target.value;\n    \n    if (!flag && last_char==='.')\n    {\n      setFlag(true);\n      display = ques + pledge[length-1];\n    }\n    else if (flag && last_char==='.') {\n      setFlag(false);\n      display = ques + pledge[length-1];\n    }\n    else if (flag) {\n      setAnswer(answer + last_char);\n      display = ques + pledge[length-1];\n    }\n       \n    setQues(display);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setSubmit(true);\n  }\n\n  function reset() {\n    window.location.reload(false);\n  }\n\n  return (\n    <div className={classes.main}>\n      <div className={classes.header}>\n        <text style={styles.headerText}>\n          Dickhead Answers\n        </text>\n      </div>\n      <div className={classes.container}>\n        <Form onSubmit={handleSubmit} >\n          <Form.Group controlId=\"question\">\n            <Form.Label>Please enter your question</Form.Label>\n            <Form.Control autoComplete=\"off\" placeholder=\"Enter a question\"/>\n          </Form.Group>\n\n          <Form.Group controlId=\"pledge\">\n            <Form.Label>Please enter your pledge!</Form.Label>\n            <Form.Control autoComplete=\"off\" placeholder=\"Peter please answer\" onChange={handleChange} value={ques} />\n          </Form.Group>\n          <div style={{display: 'flex', justifyContent: 'space-around'}}>\n            <Button variant=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n            <Button variant=\"danger\" onClick={reset}>\n              Retry\n            </Button>\n          </div>\n        </Form>\n        {submit&& <div style={{width:'100%', marginTop: 60, }} ><h3>{'answer: ' + answer}</h3></div>}    \n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  headerText: {\n    textShadow: '1px 2px 1px rgba(0,0,0,0.2)',\n    fontFamily: 'monospace',\n    fontWeight: 'bold',\n    fontSize: '5em',\n    color: 'white'\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"MainStyling_main__28Tfx\",\"header\":\"MainStyling_header__3CV-8\",\"container\":\"MainStyling_container__162PS\"};"],"sourceRoot":""}